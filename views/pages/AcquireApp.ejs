<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]>      <html class="no-js"> <!--<![endif]-->
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Vue Test</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- development version, includes helpful console warnings -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
        rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
        crossorigin="anonymous">
    <link type="text/css" rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script type="text/javascript" src="js/dataModel.js"></script>
    <link type="text/css" rel="stylesheet" href="css/style.css">
</head>

<body>
    <!--[if lt IE 7]>
            <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="#">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->

    <div id="app">
        <div class="container">
            <div class="row py-2">
                <div class="col">
                    <div class="card">
                        <h5 class="card-header">
                            Stats
                        </h5>
                        <div class="card-body">
                            <div id="playerTiles" class="row">
                                <ul class="list-group list-group-horizontal">
                                    <li class="col list-group-item">Player Count: {{ playerCount }}</li>
                                    <li class="col list-group-item">Available Tile Count: {{ availableTileCount }}</li>
                                    <li class="col list-group-item">Active Player Index: {{ ActivePlayerIndex }}</li>
                                </ul>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row py-2">
                <div class="col-lg-3">

                    <div class="row m-1">
                        <!-- Button trigger modal -->
                        <button type="button" class="col btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#buyModel">
                            Buy Stock
                        </button>
                    </div>

                    <div class="row py-2">
                        <div class="col">
                            <div class="card">
                            <h5 class="card-header">
                                Players
                            </h5>
                            <div class="card-body">
                                <div id="players" class="row">
                                    <ul class="list-group">
                                        <li v-for="(player, index) in GameData.PlayerList" class="col list-group-item"
                                            v-bind:class="{'list-group-item-primary' : index === ActivePlayerIndex}" 
                                            v-on:click="setActivePlayer(index)">
                                            <span class="bi bi-person-circle">
                                                {{ player.Display }}
                                            </span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>

                    <div class="row py-2">
                        <div class="col">
                            <div class="card border-secondary">
                                <div class="card-body">

                                    <table class="table table-sm table-borderless">
                                        <tbody>
                                            <tr>
                                                <!--<th scope="row">1</th>-->
                                                <td colspan="2" class="fw-bold">Player Cash</td>
                                                <td class="text-end">$5000</td>
                                            </tr>
                                            <tr>
                                                <!--<th scope="row">2</th>-->
                                                <td colspan="2" class="fw-bold">Stock Portfolio</td>
                                                <td class="fw-bold text-end">Value</td>
                                            </tr>

                                            <tr v-for="(portfolio, index) in activePlayer.PlayerPortfolio">
                                                <td>{{ portfolio.Display }}</td>
                                                <td>{{ portfolio.Count }}</td>
                                                <td class="text-end">$400</td>
                                            </tr>
                                            <tr>
                                                <!--  <th scope="row">3</th>-->
                                                <td colspan="2" class="fw-bold">Net Worth</td>
                                                <td class="text-end fw-bold">$800</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                </div>
                <div class="col-lg-9">
                    <div class="card">
                        <div class="card-body">
                            <div id="gameBoard" style="--grid-rows: 9; --grid-cols: 12;">
                                <div v-for="(tile, index) in GameData.Tiles" class="grid-item disable-select" v-bind:id="tile.AssetID"
                                    v-on:click="clickTile(tile)" v-bind:class="tile.StyleClass">
                                    {{ tile.Asset }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>






            <!-- Buy Stock Modal -->
            <div class="modal fade" id="buyModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Buy Stock</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">

                            <table class="table">
                                <!-- <thead>
                    <tr>
                        <th scope="col">Action</th>
                        <th scope="col">Corporation</th>
                        <th scope="col">Cost</th>
                    </tr>
                </thead>
            -->

                                <tbody>
                                    <!-- On rows -->
                                    <tr v-for="(corp, index) in GameData.Corporations">
                                        <td>

                                            {{ corp.Count}}
                                        </td>
                                        <td>
                                            <span class="p-2 m-1 text-white" v-bind:class="corp.StyleClass">{{
                                                corp.ShortName }}</span>
                                            {{ corp.Name}}
                                        </td>
                                        <td>$000</td>
                                        <td>

                                            <div class="btn-group">
                                                <a href="#" class="btn btn-light">-</a>
                                                <a href="#" class="btn btn-light">+</a>
                                            </div>
                                        </td>

                                        <td>2</td>
                                    </tr>

                                    <tr></tr>

                                </tbody>
                            </table>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>




        </div>

        <footer class="footer mt-auto py-3 bg-light fixed-bottom">
            <div class="container">
                <div id="playerTiles" class="row">
                    <div class="position-absolute top-50 start-50 translate-middle w-25">
                        <ul class="list-group list-group-horizontal ">
                            <li v-for="(tile, index) in GameData.Tiles" v-if="tile.Owner === ActivePlayerIndex"
                                class="col list-group-item shadow-sm m-1 bg-primary bg-gradient text-white rounded shadow-sm"
                                v-on:click="clickTile(tile)">
                                <h3 class="text-center disable-select">{{ tile.Asset }}</h3>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                GameData: '',
                appLoaded: false,
                ActivePlayerIndex: 0,
                InitialTileColorClasses : 'bg-secondary text-white'
            },

            mounted() { // when the Vue app is booted up, this is run automatically.
                var self = this // create a closure to access component in the callback below
                self.GameData = data.Game;
                this.appLoaded = true;
                this.assignStartTiles();
                this.assignInitialPlayerTiles();
                console.log(data.Game);

            },

            computed:
            {

                playerCount() {
                    if (this.appLoaded) {
                        // console.log(this.GameData);
                        return this.getPlayerCount();
                    }

                },

                availableTileCount() {
                    if (this.appLoaded) {
                        return this.getAvailableTileCount();
                    }
                },

                totalTileCount() {
                    if (this.appLoaded) {
                        return this.getTileCount();
                    }
                },
                activePlayer() {
                    if (this.appLoaded) {
                        return this.getActivePlayer();
                    }
                }




            },
            methods:
            {
                getRandomAvailableTiles: function (count, type) {
                    let randomTiles = [];

                    let gd = this.GameData;

                    let countbreak = 0;

                    while (randomTiles.length < count) {
                        let rand = Math.floor(Math.random() * this.GameData.Tiles.length);

                        // 
                        if (gd.Tiles[rand].Location == "Tile Box") 
                        {
                            if (type == 'label' && !randomTiles.includes(gd.Tiles[rand].Asset)) {
                                randomTiles.push(gd.Tiles[rand].Asset);
                            }

                            if (type == 'index' && !randomTiles.includes(gd.Tiles[rand].AssetID)) {
                                randomTiles.push(gd.Tiles[rand].AssetID);
                            }
                        }

                        countbreak++;

                        if (countbreak >= this.GameData.Tiles.length) {
                            break;
                        }
                    }

                    return randomTiles;
                },

                getAvailableTileCount: function () {
                    console.log(this.GameData)
                    var count = 0;
                    for (c = 0; c < this.GameData.Tiles.length; c++) {
                        if (this.GameData.Tiles[c].Location == "Tile Box") {
                            count++;
                        }
                    }
                    return count;
                },

                getTileCount: function () {
                    return Object.keys(this.GameData.Tiles).length

                },

                // a computed getter
                getPlayerCount: function () {
                    console.log(this.GameData)
                    // `this` points to the vm instance
                    return Object.keys(this.GameData.PlayerList).length


                },


                getActivePlayer() {
                    const player = this.GameData.PlayerList[this.ActivePlayerIndex]
                    return player
                },

                getPlayerTileCount()
                {
                    playerTileCount = 0;
                    for (c = 0; c < this.totalTileCount; c++) 
                    {
                        if(this.ActivePlayerIndex == this.GameData.Tiles[c].Owner &&  this.GameData.Tiles[c].Location == 'Player')
                        {
                            playerTileCount ++;
                        }
                    }

                    return playerTileCount;
                },

                setActivePlayer(playerIndex)
                {
                    this.ActivePlayerIndex = playerIndex;
                },

                // This assigns 6 initial tiles to each player at the beginning of the game. 
                assignInitialPlayerTiles() {
                    //let gd = this.GameData;
                    const pc = this.getPlayerCount();
                    for (c = 0; c < pc; c++) {
                        let playerId = this.GameData.PlayerList[c].Id
                        const randomTiles = this.getRandomAvailableTiles(6, 'label');
                        this.GameData.PlayerList[c].Tiles = randomTiles;


                        // Assign owner and move Tile to "Player Location"
                        for (t = 0; t < this.GameData.Tiles.length; t++) {
                            // Find the random tiles in the randomTile list.
                            if (randomTiles.includes(this.GameData.Tiles[t].Asset)) {
                                this.GameData.Tiles[t].Location = "Player";
                                this.GameData.Tiles[t].Owner = playerId;
                            }
                        }
                    }
                },

                // This assigns the starting tile for each player and places on the board
                assignStartTiles() {
                    const pc = this.getPlayerCount();

                    for (c = 0; c < pc; c++) {
                        let playerId = this.GameData.PlayerList[c].Id

                        const randomTile = this.getRandomAvailableTiles(1, 'index');
                        this.GameData.Tiles[randomTile].Location = "Board";
                        this.GameData.Tiles[randomTile].Owner = playerId;
                        this.GameData.Tiles[randomTile].StyleClass = this.InitialTileColorClasses;
                    }
                },

                clickTile(tile) {
                    this.checkSidesForTiles(tile);


                    // if there are less than 6 tiles, give a random tile to the player.
                    console.log(this.getPlayerTileCount());

                    if(this.getPlayerTileCount() < 7 )
                    {
                        this.givePlayerTile();
                    }
                },

                givePlayerTile()
                {
                    const randomTile = this.getRandomAvailableTiles(1, 'index');
                    this.GameData.Tiles[randomTile].Location = "Player";
                    this.GameData.Tiles[randomTile].Owner = this.ActivePlayerIndex;
                },

                moveTile(location, tileIndex) {
                    // TODO:
                },

                checkSidesForTiles(tile) {

                    let foundSideTile = false;
                    // console.log('clicked tile: ' + tile.label);
                    for (c = 0; c < this.totalTileCount; c++) {
                        const sideTile = this.GameData.Tiles[c].Asset
                        //console.log('before State Check: ' + this.GameData.Tiles[c].Asset + ' ' + tile.Left + ' ' + tile.Right + ' ' + tile.Up + ' ' + tile.Down)

                        if (this.GameData.Tiles[c].Location == 'Board') // Will need to add more locations later.
                        {
                            //console.log(this.GameData.Tiles[c].Location);
                            
                            const mergedClass = 'bg-primary bg-gradient text-white rounded shadow-sm';

                            
                            let playerId = this.GameData.PlayerList[this.ActivePlayerIndex].Id

                            if (sideTile == tile.Left) {
                                this.GameData.Tiles[c].StyleClass = mergedClass;
                                this.GameData.Tiles[tile.AssetID].StyleClass = mergedClass;
                                foundSideTile = true;
                            }
                            else if (sideTile == tile.Right) {
                                this.GameData.Tiles[c].StyleClass = mergedClass;
                                this.GameData.Tiles[tile.AssetID].StyleClass = mergedClass;
                                foundSideTile = true;
                            }
                            else if (sideTile == tile.Up) {
                                this.GameData.Tiles[c].StyleClass = mergedClass;
                                this.GameData.Tiles[tile.AssetID].StyleClass = mergedClass;
                                foundSideTile = true;
                            }
                            else if (sideTile == tile.Down) {
                                this.GameData.Tiles[c].StyleClass = mergedClass;
                                this.GameData.Tiles[tile.AssetID].StyleClass = mergedClass;
                                foundSideTile = true;
                            } else {
                                foundSideTile = false;
                                this.GameData.Tiles[tile.AssetID].StyleClass = 'bg-secondary text-white rounded shadow-sm';

                                this.GameData.Tiles[tile.AssetID].Location = "Board";
                                this.GameData.Tiles[tile.AssetID].Owner = "";
                            }


                            if (foundSideTile) {
                                //alert('Yay! You (' + tile.Asset + ') found a friend (' + sideTile + ') to the LEFT!')

                                break;
                            }

                        }
                    }

                    if (foundSideTile) {

                        //var newCorpModal = new bootstrap.Modal(document.getElementById('newCorpModal'))
                        //newCorpModal.show();
                        //alert(tileLabel);
                        //listAvailableCorps();
                    }
                    // return foundSideTile;

                }





            }


        })

    </script>
    <!-- <script src="" async defer></script>-->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

</body>

</html>