<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]>      <html class="no-js"> <!--<![endif]-->
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Acquire</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- development version, includes helpful console warnings -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
        rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
        crossorigin="anonymous">
    <link type="text/css" rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script type="text/javascript" src="js/dataModel.js"></script>
    <link type="text/css" rel="stylesheet" href="css/style.css">
</head>

<body>
    <!--[if lt IE 7]>
            <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="#">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->

    <div id="app">
        <div :style="backgroundStyleObj" class="box">
            <div class="app-wrapper">
                <header class="city-header">
                    <div>
                        <h1 class="display-6 mb-1">Acquire</h1>
                        <p class="lead mb-0">Build neon skylines and towering corporations inspired by the look of Highrise.</p>
                    </div>
                    <div class="d-flex flex-wrap align-items-center gap-3">
                        <div class="text-end">
                            <div class="stat-label mb-1">Active Player</div>
                            <div class="stat-value h4 mb-0" v-if="activePlayer">{{ activePlayer.Display }}</div>
                        </div>
                        <button type="button" class="btn city-action btn-lg" data-bs-toggle="modal"
                            data-bs-target="#customizeModal">
                            Customize Table
                        </button>
                    </div>
                </header>

                <div class="row g-4">
                    <div class="col-xxl-3 col-lg-4">
                        <div class="city-card card shadow-sm mb-4">
                            <div class="card-header">City Stats</div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush stat-list">
                                    <li class="list-group-item">
                                        <span class="stat-label">Players</span>
                                        <span class="stat-value">{{ playerCount }}</span>
                                    </li>
                                    <li class="list-group-item">
                                        <span class="stat-label">Tiles Remaining</span>
                                        <span class="stat-value">{{ availableTileCount }}</span>
                                    </li>
                                    <li class="list-group-item">
                                        <span class="stat-label">Active Seat</span>
                                        <span class="stat-value">#{{ ActivePlayerIndex + 1 }}</span>
                                    </li>
                                    <li class="list-group-item">
                                        <span class="stat-label">Tiles In Hand</span>
                                        <span class="stat-value">{{ PlayerTileCount }}</span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="city-card card shadow-sm mb-4" v-if="activePlayer">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <span>{{ activePlayer.Display }}</span>
                                <span class="badge bg-light text-dark">Current Turn</span>
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="stat-label">Cash</span>
                                    <span class="stat-value">{{ formatCurrency(activePlayer.Cash) }}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="stat-label">Portfolio Value</span>
                                    <span class="stat-value">{{ formatCurrency(activePlayerPortfolioValue) }}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-4">
                                    <span class="stat-label">Net Worth</span>
                                    <span class="stat-value">{{ formatCurrency(activePlayerNetWorth) }}</span>
                                </div>
                                <table class="table portfolio-table">
                                    <tbody>
                                        <tr v-for="(portfolio, index) in activePlayerHoldings" :key="index">
                                            <td class="text-nowrap">
                                                <span class="corp-badge me-3" v-bind:style="portfolio.StyleObject">{{ portfolio.ShortName }}</span>
                                                {{ portfolio.Name }}
                                            </td>
                                            <td class="text-end">x{{ portfolio.Count }}</td>
                                            <td class="text-end">{{ formatCurrency(portfolio.Value) }}</td>
                                        </tr>
                                        <tr v-if="activePlayerHoldings.length === 0">
                                            <td colspan="3" class="text-muted fst-italic">No shares yet&mdash;time to found a corporation.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="city-card card shadow-sm">
                            <div class="card-header">Active Corporations</div>
                            <div class="card-body">
                                <table class="table table-borderless corp-table mb-0">
                                    <tbody>
                                        <tr class="corp-row" v-for="(corp, index) in CorpCounts" v-if="corp.Status === 'Active'">
                                            <td class="align-middle">
                                                <span class="corp-badge me-3" v-bind:style="corp.StyleObject">{{ corp.ShortName }}</span>
                                            </td>
                                            <td class="align-middle fw-semibold">{{ corp.Name }}</td>
                                            <td class="align-middle text-end text-muted fw-semibold">{{ corp.CorpTileCount }}</td>
                                        </tr>
                                        <tr v-if="!hasActiveCorporations">
                                            <td colspan="3" class="text-muted fst-italic">No corporations have formed yet.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="col-xxl-9 col-lg-8">
                        <div class="city-card card shadow-lg h-100">
                            <div class="card-body p-0">
                                <div id="gameBoard" style="--grid-rows: 9; --grid-cols: 12;">
                                    <div v-for="(tile, index) in GameData.Tiles" class="grid-item disable-select"
                                        v-bind:id="tile.AssetID" v-on:click="clickTile(tile)"
                                        v-bind:style="tile.StyleObject" data-bs-toggle="tooltip" data-bs-html="true"
                                        v-bind:title="tile.Owner">
                                        {{ tile.Asset }}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--Create Corp Modal -->
        <div class="modal fade" id="startCorp" tabindex="-1" aria-labelledby="startCorpLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="startCorpLabel">Found a corporation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p class="text-muted small mb-3">Pick a brand new neon giant to light up the skyline.</p>
                        <div v-for="(corp, index) in GameData.Corporations" v-if="corp.Status === 'Inactive'"
                            class="corp-card card mb-3" v-bind:style="corp.StyleObject" v-on:click="createCorp(corp)">
                            <div class="card-body">
                                <div>
                                    <div class="text-uppercase small opacity-75">{{ corp.ShortName }}</div>
                                    <h5 class="card-title mb-0">{{ corp.Name }}</h5>
                                </div>
                                <span class="corp-badge" v-bind:style="corp.StyleObject">{{ corp.ShortName }}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--Customize Corp Modal -->
        <div class="modal fade" id="customizeModal" tabindex="-1" aria-labelledby="customizeModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="customizeModalLabel">Customize the skyline</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-4">
                            <label for="bc" class="form-label stat-label">Table Glow</label>
                            <input type="color" class="form-control form-control-color" id="bc"
                                v-model="backgroundStyleObj.backgroundColor">
                        </div>
                        <div class="row g-4">
                            <div v-for="(corp, index) in GameData.Corporations" class="col-sm-6 col-lg-4">
                                <div class="corp-card card h-100" v-bind:style="corp.StyleObject">
                                    <div class="card-body flex-column">
                                        <div class="mb-3">
                                            <span class="corp-badge me-2" v-bind:style="corp.StyleObject">{{ corp.ShortName }}</span>
                                            <div class="fw-semibold">{{ corp.Name }}</div>
                                        </div>
                                        <label class="form-label stat-label">Tile Color</label>
                                        <input type="color" class="form-control form-control-color"
                                            v-model="corp.StyleObject['--tile-color']"
                                            @input="updateCorpPalette(corp)" title="Choose your color">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">Close</button>
                        <button v-on:click="setLocalStorageSettings()" data-bs-dismiss="modal" type="button"
                            class="btn city-action">Save changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Buy Stock Modal -->
        <div class="modal fade" id="buyModel" tabindex="-1" aria-labelledby="buyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="buyModalLabel">Buy Stock</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-borderless portfolio-table mb-0">
                            <tbody>
                                <tr v-for="(corp, index) in GameData.Corporations" v-if="corp.Status === 'Active'">
                                    <td class="align-middle">
                                        <span class="corp-badge me-3" v-bind:style="corp.StyleObject">{{ corp.ShortName }}</span>
                                    </td>
                                    <td class="align-middle">
                                        <div class="fw-semibold">{{ corp.Name }}</div>
                                        <div class="small text-muted">Shares available: {{ corp.Count }}</div>
                                    </td>
                                    <td class="align-middle text-end">
                                        <div class="fw-semibold">{{ formatCurrency(corp.BasePrice) }}</div>
                                    </td>
                                    <td class="align-middle text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-light disabled">-</button>
                                            <button type="button" class="btn btn-outline-light">+</button>
                                        </div>
                                    </td>
                                </tr>
                                <tr v-if="!hasActiveCorporations">
                                    <td colspan="4" class="text-center text-muted py-4">No corporations are active yet.</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn city-action">Save changes</button>
                    </div>
                </div>
            </div>
        </div>

        <footer class="player-footer footer mt-auto py-4 fixed-bottom">
            <div class="app-wrapper">
                <div class="row align-items-center">
                    <div class="col-lg-3 d-none d-lg-block">
                        <div class="stat-label mb-1">Now Playing</div>
                        <div class="h4 mb-0" v-if="activePlayer">{{ activePlayer.Display }}</div>
                    </div>
                    <div class="col-lg-6 col-md-8 text-center">
                        <a href="#" v-for="(tile, index) in GameData.Tiles"
                            v-if="tile.Owner === ActivePlayerIndex && tile.Location === 'Player'"
                            class="tile-chip" v-bind:style="tile.StyleObject" v-on:click="clickTile(tile)">
                            {{ tile.Asset }}
                        </a>
                        <div v-if="PlayerTileCount === 0" class="text-muted small">No tiles in hand.</div>
                    </div>
                    <div class="col-lg-3 col-md-4">
                        <div class="footer-actions">
                            <div class="dropup">
                                <button class="btn city-action btn-lg dropdown-toggle w-100" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Players
                                </button>
                                <ul class="dropdown-menu dropdown-menu-dark w-100">
                                    <li v-for="(player, index) in GameData.PlayerList" class="dropdown-item"
                                        v-bind:class="{'active' : index === ActivePlayerIndex}"
                                        v-on:click="setActivePlayer(index)">
                                        <span class="bi bi-person-circle me-2"></span>
                                        {{ player.Display }}
                                    </li>
                                </ul>
                            </div>
                            <button type="button" class="btn city-action btn-lg w-100" data-bs-toggle="modal"
                                data-bs-target="#buyModel">
                                Buy Stock
                            </button>
                            <button type="button" class="btn city-action btn-lg w-100" data-bs-toggle="modal"
                                data-bs-target="#customizeModal">
                                Customize Table
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                GameData: '',
                appLoaded: false,
                ActivePlayerIndex: 0,
                TempCreateCorpArray: [],
                corpArray: null,
                backgroundStyleObj: {
                    backgroundColor: '#0b0d1f'
                },
                InitialTileStyle: {
                    '--tile-color': 'rgba(255, 255, 255, 0.16)',
                    '--tile-top': 'rgba(255, 255, 255, 0.32)',
                    '--tile-glow': 'rgba(90, 115, 255, 0.32)',
                    '--tile-text': '#f6f8ff'
                }

            },

            mounted() { // when the Vue app is booted up, this is run automatically.
                this.GameData = data.Game;
                this.GameData.Corporations.forEach(corp => this.updateCorpPalette(corp));
                this.appLoaded = true;
                this.corpArray = this.getCorpArray();
                this.assignStartTiles();
                this.assignInitialPlayerTiles();
                this.assignInitialCash();
                this.populateStockCount();
                this.getLocalStorageSettings();
                this.$nextTick(() => this.setupTooltips());

            },

            computed: {

                playerCount() {
                    if (this.appLoaded) {
                        return this.getPlayerCount();
                    }
                    return 0;
                },

                availableTileCount() {
                    if (this.appLoaded) {
                        return this.getAvailableTileCount();
                    }
                    return 0;
                },

                totalTileCount() {
                    if (this.appLoaded) {
                        return this.getTileCount();
                    }
                    return 0;
                },
                activePlayer() {
                    if (this.appLoaded) {
                        return this.getActivePlayer();
                    }
                    return null;
                },
                activePlayerHoldings() {
                    if (!this.appLoaded || !this.activePlayer) {
                        return [];
                    }
                    const holdings = [];
                    const player = this.activePlayer;
                    if (!player.PlayerPortfolio) {
                        return holdings;
                    }
                    player.PlayerPortfolio.forEach(entry => {
                        const corp = this.corpArray.get(entry.ID);
                        if (corp) {
                            holdings.push({
                                Name: entry.Name,
                                ShortName: corp.ShortName,
                                Count: entry.Count,
                                Value: entry.Count * corp.BasePrice,
                                StyleObject: corp.StyleObject
                            });
                        }
                    });
                    return holdings;
                },
                activePlayerPortfolioValue() {
                    if (!this.appLoaded) {
                        return 0;
                    }
                    return this.activePlayerHoldings.reduce((total, holding) => total + holding.Value, 0);
                },
                activePlayerNetWorth() {
                    if (!this.appLoaded || !this.activePlayer) {
                        return 0;
                    }
                    return (this.activePlayer.Cash || 0) + this.activePlayerPortfolioValue;
                },
                playerCash() {
                    if (this.appLoaded) {
                        return this.getPlayerCash();
                    }
                    return 0;
                },

                labelToTileMap() {
                    if (this.appLoaded) {
                        return this.getLabelToTileMap();
                    }
                    return new Map();
                },

                indexToTileMap() {
                    if (this.appLoaded) {
                        return this.getIndexToTileMap();
                    }
                    return new Map();
                },
                PlayerTileCount() {
                    if (this.appLoaded) {
                        return this.getPlayerTileCount();
                    }
                    return 0;
                },
                CorpCounts() {
                    if (this.appLoaded) {
                        return this.getCorpTileCounts();
                    }
                    return [];
                },
                hasActiveCorporations() {
                    if (!this.appLoaded) {
                        return false;
                    }
                    return this.CorpCounts.some(corp => corp.Status === 'Active');
                }

            },
            methods: {

                formatCurrency(value) {
                    const number = Number(value) || 0;
                    return new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        maximumFractionDigits: 0
                    }).format(number);
                },

                setupTooltips() {
                    if (typeof bootstrap === 'undefined') {
                        return;
                    }
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    tooltipTriggerList.forEach(el => new bootstrap.Tooltip(el));
                },

                getCorpTileCounts() {
                    this.GameData.Corporations.forEach(corp => {
                        corp.CorpTileCount = 0;
                    });

                    this.GameData.Tiles.forEach(tile => {
                        if (this.corpArray && this.corpArray.has(tile.Location)) {
                            const corp = this.corpArray.get(tile.Location);
                            if (corp) {
                                this.GameData.Corporations[corp.CorpDetailsID].CorpTileCount += 1;
                            }
                        }
                    });

                    return this.GameData.Corporations;
                },
                getLocalStorageSettings() {

                    let bgc = localStorage.getItem('bgc');

                    if (bgc) {
                        this.backgroundStyleObj.backgroundColor = bgc;
                    }
                },

                setLocalStorageSettings() {
                    localStorage.setItem('bgc', this.backgroundStyleObj.backgroundColor);
                },

                populateStockCount() {
                    const stockLimit = this.GameData.Setup.StockLimit;
                    const corpLength = this.GameData.Corporations.length;

                    for (let c = 0; c < corpLength; c++) {
                        this.GameData.Corporations[c].Count = stockLimit;
                    }
                },

                assignInitialCash() {
                    const pc = this.getPlayerCount();

                    for (let c = 0; c < pc; c++) {
                        this.GameData.PlayerList[c].Cash = this.GameData.Setup.InitialCash;
                    }

                },

                getCorpArray() {
                    const corpArray = new Map();
                    const corpLength = this.GameData.Corporations.length;

                    for (let c = 0; c < corpLength; c++) {
                        const corp = this.GameData.Corporations[c];
                        corpArray.set(corp.ID, corp);
                    }

                    return corpArray;
                },

                getIndexToTileMap() {
                    const labelMap = new Map();
                    for (let c = 0; c < this.totalTileCount; c++) {
                        const tile = this.GameData.Tiles[c];
                        labelMap.set(tile.AssetID, tile);
                    }

                    return labelMap;
                },

                getLabelToTileMap() {
                    const labelMap = new Map();

                    for (let c = 0; c < this.totalTileCount; c++) {
                        const tile = this.GameData.Tiles[c];
                        labelMap.set(tile.Asset, tile);
                    }

                    return labelMap;
                },

                getRandomAvailableTiles(count, type) {
                    let randomTiles = [];

                    let gd = this.GameData;

                    let countbreak = 0;

                    while (randomTiles.length < count) {
                        let rand = Math.floor(Math.random() * this.GameData.Tiles.length);

                        if (gd.Tiles[rand].Location == "Tile Box") {
                            if (type == 'label' && !randomTiles.includes(gd.Tiles[rand].Asset)) {
                                randomTiles.push(gd.Tiles[rand].Asset);
                            }

                            if (type == 'index' && !randomTiles.includes(gd.Tiles[rand].AssetID)) {
                                randomTiles.push(gd.Tiles[rand].AssetID);
                            }
                        }

                        countbreak++;

                        if (countbreak >= this.GameData.Tiles.length) {
                            break;
                        }
                    }

                    return randomTiles;
                },

                getAvailableTileCount() {
                    let count = 0;
                    for (let c = 0; c < this.GameData.Tiles.length; c++) {
                        if (this.GameData.Tiles[c].Location == "Tile Box") {
                            count++;
                        }
                    }
                    return count;
                },

                getTileCount() {
                    return Object.keys(this.GameData.Tiles).length;

                },

                getPlayerCount() {
                    return Object.keys(this.GameData.PlayerList).length;


                },


                getActivePlayer() {
                    return this.GameData.PlayerList[this.ActivePlayerIndex];
                },

                getPlayerTileCount() {
                    let playerTileCount = 0;
                    for (let c = 0; c < this.totalTileCount; c++) {
                        if (this.ActivePlayerIndex == this.GameData.Tiles[c].Owner && this.GameData.Tiles[c].Location == 'Player') {
                            playerTileCount++;
                        }
                    }

                    return playerTileCount;
                },

                getPlayerCash() {
                    if (!this.activePlayer) {
                        return 0;
                    }
                    return this.activePlayer.Cash;
                },

                setActivePlayer(playerIndex) {
                    this.ActivePlayerIndex = playerIndex;
                },

                assignInitialPlayerTiles() {
                    const pc = this.getPlayerCount();
                    for (let c = 0; c < pc; c++) {
                        let playerId = this.GameData.PlayerList[c].Id;
                        const randomTiles = this.getRandomAvailableTiles(6, 'label');
                        this.GameData.PlayerList[c].Tiles = randomTiles;


                        for (let t = 0; t < this.GameData.Tiles.length; t++) {
                            if (randomTiles.includes(this.GameData.Tiles[t].Asset)) {
                                this.GameData.Tiles[t].Location = "Player";
                                this.GameData.Tiles[t].Owner = playerId;
                                this.GameData.Tiles[t].StyleObject = this.getDefaultTileStyle();
                            }
                        }
                    }
                },

                assignStartTiles() {

                    const pc = this.getPlayerCount();

                    for (let c = 0; c < pc; c++) {
                        const [randomTile] = this.getRandomAvailableTiles(1, 'index');
                        if (randomTile !== undefined) {
                            this.GameData.Tiles[randomTile].Location = "Board";
                            this.GameData.Tiles[randomTile].StyleObject = this.getDefaultTileStyle();
                        }
                    }
                },

                clickTile(tile) {
                    this.GameData.Tiles[tile.AssetID].Owner = "";
                    this.GameData.Tiles[tile.AssetID].StyleObject = this.getDefaultTileStyle();
                    this.GameData.Tiles[tile.AssetID].Location = "Board";
                    this.checkSidesForTiles(tile);


                    if (this.PlayerTileCount < 7) {
                        this.givePlayerTile();
                    }
                    this.$nextTick(() => this.setupTooltips());
                },

                givePlayerTile() {
                    const [randomTile] = this.getRandomAvailableTiles(1, 'index');
                    if (randomTile !== undefined) {
                        this.GameData.Tiles[randomTile].Location = "Player";
                        this.GameData.Tiles[randomTile].Owner = this.ActivePlayerIndex;
                        this.GameData.Tiles[randomTile].StyleObject = this.getDefaultTileStyle();
                    }
                },

                moveTile(location, tileIndex) {
                    // TODO:
                },


                checkSidesForTiles(tile) {
                    let foundSideTile = false;
                    let foundSideTileCorp = false;
                    let sideTileIndexArray = [];

                    let leftTile = null;
                    let rightTile = null;
                    let upTile = null;
                    let downTile = null;

                    const corpArrayVar = this.corpArray;

                    if (tile.Left) {
                        leftTile = this.labelToTileMap.get(tile.Left);

                        if (corpArrayVar.has(leftTile.Location)) {
                            this.GameData.Tiles[tile.AssetID].StyleObject = leftTile.StyleObject;
                            this.GameData.Tiles[tile.AssetID].Location = leftTile.Location;
                            foundSideTileCorp = true;
                        }

                        if (leftTile.Location == 'Board') {
                            foundSideTile = true;
                            sideTileIndexArray.push(leftTile.AssetID);
                        }

                    }

                    if (tile.Right) {
                        rightTile = this.labelToTileMap.get(tile.Right);
                        if (corpArrayVar.has(rightTile.Location)) {
                            this.GameData.Tiles[tile.AssetID].StyleObject = rightTile.StyleObject;
                            this.GameData.Tiles[tile.AssetID].Location = rightTile.Location;
                            foundSideTileCorp = true;
                        }
                        if (rightTile.Location == 'Board') {
                            foundSideTile = true;
                            sideTileIndexArray.push(rightTile.AssetID);
                        }
                    }

                    if (tile.Up) {
                        upTile = this.labelToTileMap.get(tile.Up);
                        if (corpArrayVar.has(upTile.Location)) {
                            this.GameData.Tiles[tile.AssetID].StyleObject = upTile.StyleObject;
                            this.GameData.Tiles[tile.AssetID].Location = upTile.Location;
                            foundSideTileCorp = true;
                        }

                        if (upTile.Location == 'Board') {
                            foundSideTile = true;
                            sideTileIndexArray.push(upTile.AssetID);
                        }
                    }

                    if (tile.Down) {
                        downTile = this.labelToTileMap.get(tile.Down);
                        if (corpArrayVar.has(downTile.Location)) {
                            this.GameData.Tiles[tile.AssetID].StyleObject = downTile.StyleObject;
                            this.GameData.Tiles[tile.AssetID].Location = downTile.Location;
                            foundSideTileCorp = true;
                        }

                        if (downTile.Location == 'Board') {
                            foundSideTile = true;
                            sideTileIndexArray.push(downTile.AssetID);
                        }
                    }

                    if (foundSideTileCorp) {

                        if (foundSideTile) {

                            const updatedTile = this.GameData.Tiles[tile.AssetID];

                            for (let c = 0; c < sideTileIndexArray.length; c++) {
                                const tileIndex = sideTileIndexArray[c];
                                this.GameData.Tiles[tileIndex].StyleObject = updatedTile.StyleObject;
                                this.GameData.Tiles[tileIndex].Location = updatedTile.Location;
                                this.GameData.Tiles[tileIndex].Owner = updatedTile.Location;
                            }
                        }

                    }

                    else if (foundSideTile) {
                        var newCorpModal = new bootstrap.Modal(document.getElementById('startCorp'),
                            {
                                backdrop: 'static',
                                keyboard: false
                            })
                        newCorpModal.show();
                        sideTileIndexArray.push(tile.AssetID);

                        this.TempCreateCorpArray = sideTileIndexArray;
                    }
                    else {
                        this.GameData.Tiles[tile.AssetID].StyleObject = this.getDefaultTileStyle();

                        this.GameData.Tiles[tile.AssetID].Location = "Board";
                        this.GameData.Tiles[tile.AssetID].Owner = "";
                    }

                },

                createCorp(corp) {

                    this.updateCorpPalette(corp);

                    for (let c = 0; c < this.TempCreateCorpArray.length; c++) {
                        const tileIndex = this.TempCreateCorpArray[c];
                        this.GameData.Tiles[tileIndex].StyleObject = corp.StyleObject;
                        this.GameData.Tiles[tileIndex].Location = corp.ID;
                        this.GameData.Tiles[tileIndex].Owner = corp.ID;

                        this.GameData.Corporations[corp.CorpDetailsID].Status = 'Active';
                    }

                    this.GameData.PlayerList[this.ActivePlayerIndex].PlayerPortfolio.push(
                        {
                            "Name": corp.Name,
                            "ID": corp.ID,
                            "Count": 1
                        }
                    )

                    this.GameData.Corporations[corp.CorpDetailsID].Count += -1;

                    var myModalEl = document.getElementById('startCorp');
                    var modal = bootstrap.Modal.getInstance(myModalEl)
                    modal.hide();

                    this.TempCreateCorpArray = [];
                },



                customizeModal() {


                    var myModalEl = document.getElementById('bc');
                    var modal = bootstrap.Modal.getInstance(myModalEl)
                    modal.hide();
                },

                getDefaultTileStyle() {
                    return Object.assign({}, this.InitialTileStyle);
                },

                updateCorpPalette(corp) {
                    if (!corp.StyleObject) {
                        corp.StyleObject = {};
                    }
                    const baseColor = corp.StyleObject['--tile-color'];
                    if (!baseColor) {
                        return;
                    }
                    corp.StyleObject['--tile-top'] = this.lightenColor(baseColor, 28);
                    corp.StyleObject['--tile-glow'] = this.alphaColor(baseColor, 0.42);
                    corp.StyleObject['--tile-text'] = this.getReadableTextColor(baseColor);
                },

                lightenColor(color, amount) {
                    if (!color) {
                        return color;
                    }
                    const hex = color.replace('#', '');
                    if (hex.length !== 6) {
                        return color;
                    }
                    const num = parseInt(hex, 16);
                    let r = (num >> 16) & 0xff;
                    let g = (num >> 8) & 0xff;
                    let b = num & 0xff;

                    const lighten = channel => Math.min(255, Math.round(channel + (255 - channel) * (amount / 100)));
                    r = lighten(r);
                    g = lighten(g);
                    b = lighten(b);

                    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                },

                alphaColor(color, alpha) {
                    const hex = color.replace('#', '');
                    if (hex.length !== 6) {
                        return `rgba(255, 255, 255, ${alpha})`;
                    }
                    const num = parseInt(hex, 16);
                    const r = (num >> 16) & 0xff;
                    const g = (num >> 8) & 0xff;
                    const b = num & 0xff;
                    return `rgba(${r}, ${g}, ${b}, ${alpha})`;
                },

                getReadableTextColor(color) {
                    const hex = color.replace('#', '');
                    if (hex.length !== 6) {
                        return '#0b0d1f';
                    }
                    const r = parseInt(hex.substr(0, 2), 16) / 255;
                    const g = parseInt(hex.substr(2, 2), 16) / 255;
                    const b = parseInt(hex.substr(4, 2), 16) / 255;

                    const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;
                    return luminance > 0.65 ? '#0b0d1f' : '#f6f8ff';
                }



            }
        })

    </script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

</body>

</html>
