<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]>      <html class="no-js"> <!--<![endif]-->
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Vue Test</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- development version, includes helpful console warnings -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
        rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
        crossorigin="anonymous">
    <link type="text/css" rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script type="text/javascript" src="js/dataModel.js"></script>
    <link type="text/css" rel="stylesheet" href="css/style.css">
</head>

<body >
    <!--[if lt IE 7]>
            <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="#">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->

    <div id="app">
        <div :style="backgroundStyleObj" class="box">
                <div class="row py-2">
                   
                </div>
                <div class="row py-2">
                    <div class="col-xlg-2 col-lg-3 col-md-4">
                        <div class="row">
                            <div class="card ms-2">
                                <h5 class="card-header">
                                    Stats
                                </h5>
                                <div class="card-body">
                                    <div id="playerTiles" class="row">
                                        <ul class="list-group list-group">
                                            <li class="col list-group-item">Player Count: {{ playerCount }}</li>
                                            <li class="col list-group-item">Available Tile Count: {{ availableTileCount }}</li>
                                            <li class="col list-group-item">Active Player Index: {{ ActivePlayerIndex }}</li>
                                        </ul>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-secondary ms-2 mt-2">
                                <div class="card-body">
        
                                    <table class="table table-sm table-borderless">
                                        <tbody>
                                            <tr>
                                                <!--<th scope="row">1</th>-->
                                                <td colspan="2" class="fw-bold">Player Cash</td>
                                                <td class="text-end">${{activePlayer.Cash}}</td>
                                            </tr>
                                            <tr>
                                                <!--<th scope="row">2</th>-->
                                                <td colspan="2" class="fw-bold">Stock Portfolio</td>
                                                <td class="fw-bold text-end">Value</td>
                                            </tr>
        
                                            <tr v-for="(portfolio, index) in activePlayer.PlayerPortfolio">
                                                <td>{{ portfolio.Display }}</td>
                                                <td>{{ portfolio.Count }}</td>
                                                <td class="text-end">$400</td>
                                            </tr>
                                            <tr>
                                                <!--  <th scope="row">3</th>-->
                                                <td colspan="2" class="fw-bold">Net Worth</td>
                                                <td class="text-end fw-bold">$800</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-xlg-10 col-lg-9 col-md-8">
                        <div class="card">
                            <div class="card-body">
                                <div id="gameBoard" style="--grid-rows: 9; --grid-cols: 12;">
                                    <div v-for="(tile, index) in GameData.Tiles" class="grid-item disable-select"
                                        v-bind:id="tile.AssetID" v-on:click="clickTile(tile)"
                                        v-bind:class="tile.StyleClass">
                                        {{ tile.Asset }}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <!--Create Corp Modal -->
                <div class="modal fade" id="startCorp" tabindex="-1" aria-labelledby="startCorpLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="startCorpLabel">Start Corp</h5>
                                <!--
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                -->
                            </div>
                            <div class="modal-body">
                                <!-- On rows -->
                                <div v-for="(corp, index) in GameData.Corporations" v-if="corp.Status === 'Inactive' ">

                                    <div class="card mb-3"  v-bind:class="corp.StyleClass" v-on:click="createCorp(corp)">
                                        <div class="card-body">
                                            <h5 class="card-title">{{ corp.Name}}</h5>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                

                <!--Create Corp Modal -->
                <div class="modal fade" id="customizeModal" tabindex="-1" aria-labelledby="customizeModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="customizeModalLabel">Customize</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                            
                                <div class="mb-3">
                                    <label for="bc" class="form-label">Background Color</label>
                                    <input type="text" class="form-control" id="bc"  v-model="backgroundStyleObj.backgroundColor">
                                </div>

                                <div  class="mb-3" >

                                    <div class="row align-items-start">
                                        <div v-for="(corp, index) in GameData.Corporations" class="col">
                                            <label for="exampleColorInput" class="form-label">{{ corp.Name}}</label>
                                            <input type="color" class="form-control form-control-color" id="exampleColorInput" v-model="corp.StyleObject.bacgroundColor" title="Choose your color">
                                        </div>
                                      </div> 
                                </div>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button v-on:click="setLocalStorageSettings()" data-bs-dismiss="modal" type="button" class="btn btn-primary" >Save changes</button>
                            </div>
                        </div>
                    </div>
                </div>


                <!-- Buy Stock Modal -->
                <div class="modal fade" id="buyModel" tabindex="-1" aria-labelledby="buyModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="buyModalLabel">Buy Stock</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">

                                <table class="table">
                                    <!-- <thead>
                        <tr>
                            <th scope="col">Action</th>
                            <th scope="col">Corporation</th>
                            <th scope="col">Cost</th>
                        </tr>
                    </thead>
                -->

                                    <tbody>
                                        <!-- On rows -->
                                        <tr v-for="(corp, index) in GameData.Corporations" v-if="corp.Status === 'Active' ">
                                            <td>

                                                {{ corp.Count}}
                                            </td>
                                            <td>
                                                <span class="p-2 m-1 text-white" v-bind:class="corp.StyleClass">{{
                                                    corp.ShortName }}</span>
                                                {{ corp.Name}}
                                            </td>
                                            <td>$000</td>
                                            <td>

                                                <div class="btn-group">
                                                    <a href="#" class="btn btn-light">-</a>
                                                    <a href="#" class="btn btn-light">+</a>
                                                </div>
                                            </td>

                                            <td>2</td>
                                        </tr>

                                        <tr></tr>

                                    </tbody>
                                </table>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary">Save changes</button>
                            </div>
                        </div>
                    </div>
                </div>


        </div>
        

        <footer class="footer mt-auto py-3 bg-light fixed-bottom">
            <div id="playerTiles" class="row">
                <div class="col-lg-3 col-md-2">

                </div>

                <div class="col-lg-6 col-md-8">

                    <a href="#" v-for="(tile, index) in GameData.Tiles" v-if="tile.Owner === ActivePlayerIndex"
                        class="btn btn-primary btn-lg shadow-sm fs-3 mx-2 " style="width: 80px; height: 70px; "
                        v-on:click="clickTile(tile)">
                        {{ tile.Asset }}
                    </a>

                </div>

                <div class="col-lg-3 col-md-2">
                    <!-- Large button groups (default and split) -->
                    <div id="players" class="row"></div>
                    <div class="btn-group dropup">
                        <button class="btn btn-secondary btn-lg dropdown-toggle" type="button"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            Players
                        </button>


                        <ul class="dropdown-menu dropdown-menu-dark">
                            <li v-for="(player, index) in GameData.PlayerList" class="dropdown-item"
                                v-bind:class="{'active' : index === ActivePlayerIndex}"
                                v-on:click="setActivePlayer(index)">
                                <span class="bi bi-person-circle">
                                    {{ player.Display }}
                                </span>
                            </li>
                        </ul>

                        <!-- Button trigger modal -->

                    </div>

                    <div class="btn-group dropup">
                        <button type="button" class="col btn btn-lg btn-primary" data-bs-toggle="modal"
                            data-bs-target="#buyModel">
                            Buy Stock
                        </button>
                    </div>

                    <div class="btn-group dropup">
                        <button type="button" class="col btn btn-lg btn-primary" data-bs-toggle="modal"
                            data-bs-target="#customizeModal">
                            Customize
                        </button>
                    </div>
                </div>

            </div>
        </footer>
    </div>


    <script>
        var app = new Vue({
            el: '#app',
            data: {
                GameData: '',
                appLoaded: false,
                ActivePlayerIndex: 0,
                InitialTileColorClasses: 'bg-secondary text-white',
                TempCreateCorpArray: [],
                corpArray: null,
                backgroundStyleObj :
                {
                    backgroundColor :'black'
                } 
                

            },

            mounted() { // when the Vue app is booted up, this is run automatically.
                var self = this // create a closure to access component in the callback below
                self.GameData = data.Game;
                this.appLoaded = true;
                this.corpArray = this.getCorpArray();
                this.assignStartTiles();
                this.assignInitialPlayerTiles();
                //console.log(data.Game);
                this.assignInitialCash();
                this.populateStockCount();
                this.getLocalStorageSettings();


            },

            computed:
            {

                playerCount() {
                    if (this.appLoaded) {
                        // console.log(this.GameData);
                        return this.getPlayerCount();
                    }

                },

                availableTileCount() {
                    if (this.appLoaded) {
                        return this.getAvailableTileCount();
                    }
                },

                totalTileCount() {
                    if (this.appLoaded) {
                        return this.getTileCount();
                    }
                },
                activePlayer() {
                    if (this.appLoaded) {
                        return this.getActivePlayer();
                    }
                },
                playerCash() {
                    if (this.appLoaded) {
                        return this.getPlayerCash();
                    }
                },

                labelToTileMap()
                {
                    if(this.appLoaded)
                    {
                        return this.getLabelToTileMap();
                    }
                },

                indexToTileMap()
                {
                    if(this.appLoaded)
                    {
                        return this.getIndexToTileMap();
                    }
                }

            },
            methods:
            {

                getLocalStorageSettings()
                {

                    let bgc = localStorage.getItem('bgc');
                     
                    if(bgc)
                    {
                        this.backgroundStyleObj.backgroundColor = bgc;
                    }
                },

                setLocalStorageSettings()
                {
                    let bgc = localStorage.setItem('bgc',this.backgroundStyleObj.backgroundColor);
                },

                populateStockCount()
                {
                    const stockLimit = this.GameData.Setup.StockLimit;
                    const corpLength = this.GameData.Corporations.length;

                    for (c = 0; c < corpLength; c++) 
                    {
                        this.GameData.Corporations[c].Count = stockLimit;
                    }
                },

                assignInitialCash() 
                {
                    const pc = this.getPlayerCount();

                    for (c = 0; c < pc; c++) {
                        this.GameData.PlayerList[c].Cash = this.GameData.Setup.InitialCash;
                    }

                },

                getCorpArray()
                {
                    const corpArray = new Map();
                    const corpLength = this.GameData.Corporations.length;

                    for (c = 0; c < corpLength; c++)
                    {
                        const corp = this.GameData.Corporations[c];
                        corpArray.set(corp.ID, corp);
                    }

                    return corpArray;
                },

                getIndexToTileMap()
                {
                    const labelMap = new Map();
                    console.log('totalTileCount: ' + this.totalTileCount);
                    for (c = 0; c < this.totalTileCount; c++)
                    {
                        const tile = this.GameData.Tiles[c];
                        labelMap.set(tile.AssetID, tile);
                    }

                    return labelMap;
                },

                getLabelToTileMap()
                {
                    const labelMap = new Map();

                    for (c = 0; c < this.totalTileCount; c++)
                    {
                        const tile = this.GameData.Tiles[c];
                        labelMap.set(tile.Asset, tile);
                    }

                    return labelMap;
                },


                getRandomAvailableTiles: function (count, type) {
                    let randomTiles = [];

                    let gd = this.GameData;

                    let countbreak = 0;

                    while (randomTiles.length < count) {
                        let rand = Math.floor(Math.random() * this.GameData.Tiles.length);

                        // 
                        if (gd.Tiles[rand].Location == "Tile Box") {
                            if (type == 'label' && !randomTiles.includes(gd.Tiles[rand].Asset)) {
                                randomTiles.push(gd.Tiles[rand].Asset);
                            }

                            if (type == 'index' && !randomTiles.includes(gd.Tiles[rand].AssetID)) {
                                randomTiles.push(gd.Tiles[rand].AssetID);
                            }
                        }

                        countbreak++;

                        if (countbreak >= this.GameData.Tiles.length) {
                            break;
                        }
                    }

                    return randomTiles;
                },

                getAvailableTileCount: function () {
                    console.log(this.GameData)
                    var count = 0;
                    for (c = 0; c < this.GameData.Tiles.length; c++) {
                        if (this.GameData.Tiles[c].Location == "Tile Box") {
                            count++;
                        }
                    }
                    return count;
                },

                getTileCount: function () {
                    return Object.keys(this.GameData.Tiles).length

                },

                // a computed getter
                getPlayerCount: function () {
                    //console.log(this.GameData)
                    // `this` points to the vm instance
                    return Object.keys(this.GameData.PlayerList).length


                },


                getActivePlayer() 
                {
                    const player = this.GameData.PlayerList[this.ActivePlayerIndex]
                    console.log('activePlayer: ' + player);   
                    return player
                },

                getPlayerTileCount() {
                    playerTileCount = 0;
                    for (c = 0; c < this.totalTileCount; c++) {
                        if (this.ActivePlayerIndex == this.GameData.Tiles[c].Owner && this.GameData.Tiles[c].Location == 'Player') {
                            playerTileCount++;
                        }
                    }

                    return playerTileCount;
                },

                setActivePlayer(playerIndex) {
                    this.ActivePlayerIndex = playerIndex;
                },

                // This assigns 6 initial tiles to each player at the beginning of the game. 
                assignInitialPlayerTiles() {
                    //let gd = this.GameData;
                    const pc = this.getPlayerCount();
                    for (c = 0; c < pc; c++) {
                        let playerId = this.GameData.PlayerList[c].Id
                        const randomTiles = this.getRandomAvailableTiles(6, 'label');
                        this.GameData.PlayerList[c].Tiles = randomTiles;


                        // Assign owner and move Tile to "Player Location"
                        for (t = 0; t < this.GameData.Tiles.length; t++) {
                            // Find the random tiles in the randomTile list.
                            if (randomTiles.includes(this.GameData.Tiles[t].Asset)) {
                                this.GameData.Tiles[t].Location = "Player";
                                this.GameData.Tiles[t].Owner = playerId;
                            }
                        }
                    }
                },

                // This assigns the starting tile for each player and places on the board
                assignStartTiles() {

                    //TODO: ensure tiles are not next to each other.
                    const pc = this.getPlayerCount();

                    for (c = 0; c < pc; c++) {
                        let playerId = this.GameData.PlayerList[c].Id

                        const randomTile = this.getRandomAvailableTiles(1, 'index');
                        this.GameData.Tiles[randomTile].Location = "Board";
                        //this.GameData.Tiles[randomTile].Owner = playerId;
                        this.GameData.Tiles[randomTile].StyleClass = this.InitialTileColorClasses;
                    }
                },

                clickTile(tile) {
                    console.log('clicked Tile: ' + tile.Asset);
                    this.checkSidesForTiles(tile);


                    // if there are less than 6 tiles, give a random tile to the player.
                    console.log(this.getPlayerTileCount());

                    if (this.getPlayerTileCount() < 7) {
                        this.givePlayerTile();
                    }
                },

                givePlayerTile() {
                    const randomTile = this.getRandomAvailableTiles(1, 'index');
                    this.GameData.Tiles[randomTile].Location = "Player";
                    this.GameData.Tiles[randomTile].Owner = this.ActivePlayerIndex;
                },

                moveTile(location, tileIndex) {
                    // TODO:
                },


                isMerge()
                {


                },


                /**
                 * 
                 */
                checkSidesForTiles(tile) 
                {
                    //TODO: Break up into smaller methods. 

                    let foundSideTile = false;
                    let foundSideTileCorp = false;
                    let sideTileIndexArray = [];
                    // console.log('clicked tile: ' + tile.label);

                    let leftTile = null;
                    let rightTile = null;
                    let upTile = null;
                    let downTile = null;

                    if(tile.Left)
                    {
                        
                        leftTile = this.labelToTileMap.get(tile.Left);
                        const corpArrayVar = this.corpArray;

                        // if side tile is next to a corp, update tile
                        if(corpArrayVar.has(leftTile.Location))
                        {
                            console.log('matched w/ corp')
                            // Matching corp tile.
                            this.GameData.Tiles[tile.AssetID].StyleClass = leftTile.StyleClass;
                            this.GameData.Tiles[tile.AssetID].Location = leftTile.Location;
                            foundSideTileCorp = true;
                        }
                        
                        if(leftTile.Location == 'Board')
                        {
                            foundSideTile = true;
                            sideTileIndexArray.push(leftTile.AssetID);
                        }
                        
                        
                    }

                    if(tile.Right)
                    {
                        console.log('right tile: ' + tile.Right);
                        rightTile = this.labelToTileMap.get(tile.Right);
                        const corpArrayVar = this.corpArray;
                        if(corpArrayVar.has(rightTile.Location))
                        {
                            console.log('matched w/ corp')
                            // Matching corp tile.
                            this.GameData.Tiles[tile.AssetID].StyleClass = rightTile.StyleClass;
                            this.GameData.Tiles[tile.AssetID].Location = rightTile.Location;
                            foundSideTileCorp = true;
                        }
                        if(rightTile.Location == 'Board')
                        {
                            foundSideTile = true;
                            sideTileIndexArray.push(rightTile.AssetID);
                        }
                    }

                    if(tile.Up)
                    {
                        console.log('up tile: ' + tile.Up);
                        upTile = this.labelToTileMap.get(tile.Up);
                        const corpArrayVar = this.corpArray;

                        if(corpArrayVar.has(upTile.Location))
                        {
                            console.log('matched w/ corp')
                            // Matching corp tile.
                            this.GameData.Tiles[tile.AssetID].StyleClass = upTile.StyleClass;
                            this.GameData.Tiles[tile.AssetID].Location = upTile.Location;
                            foundSideTileCorp = true;
                        }
                        
                        if(upTile.Location == 'Board')
                        {
                            foundSideTile = true;
                            sideTileIndexArray.push(upTile.AssetID);
                        }
                    }

                    if(tile.Down)
                    {
                        console.log('down tile: ' + tile.Down);
                        downTile = this.labelToTileMap.get(tile.Down);
                        const corpArrayVar = this.corpArray;
                        if(corpArrayVar.has(downTile.Location))
                        {
                            console.log('matched w/ corp')
                            // Matching corp tile.
                            this.GameData.Tiles[tile.AssetID].StyleClass = downTile.StyleClass;
                            this.GameData.Tiles[tile.AssetID].Location = downTile.Location;
                            foundSideTileCorp = true;
                        }
                        
                        if(downTile.Location == 'Board')
                        {
                            foundSideTile = true;
                            sideTileIndexArray.push(downTile.AssetID);
                        }
                    }

                    if (foundSideTileCorp) {

                        if (foundSideTile)
                        {

                            // get updated style and assignment values.
                            const updatedTile = this.GameData.Tiles[tile.AssetID];

                            for (c = 0; c < sideTileIndexArray.length; c++)
                            {
                                const tileIndex = sideTileIndexArray[c];
                                console.log('tile Index: ' + tileIndex);
                                this.GameData.Tiles[tileIndex].StyleClass = updatedTile.StyleClass;
                                this.GameData.Tiles[tileIndex].Location = updatedTile.ID;
                                //this.GameData.Tiles[c].Status = 'Active';
                            }
                        }
                        
                    } 
                    
                    else if (foundSideTile)
                    {
                        var newCorpModal = new bootstrap.Modal(document.getElementById('startCorp'))
                        newCorpModal.show();
                        //alert(tileLabel);
                        //listAvailableCorps();
                        sideTileIndexArray.push(tile.AssetID);

                        // Set the temp array so they can be used to update the tiles for the newly created Corp.
                        this.TempCreateCorpArray = sideTileIndexArray;
                    }
                    else {
                        foundSideTile = false;
                        this.GameData.Tiles[tile.AssetID].StyleClass = 'bg-secondary text-white rounded shadow-sm';

                        this.GameData.Tiles[tile.AssetID].Location = "Board";
                        this.GameData.Tiles[tile.AssetID].Owner = "";
                    }
                    // return foundSideTile;

                },
                
                createCorp(corp)
                {
                    
                    console.log('temp array: ' + this.TempCreateCorpArray);
                    
                    for (c = 0; c < this.TempCreateCorpArray.length; c++)
                    {
                        const tileIndex = this.TempCreateCorpArray[c];
                        console.log('tile Index: ' + tileIndex);
                        this.GameData.Tiles[tileIndex].StyleClass = corp.StyleClass;
                        this.GameData.Tiles[tileIndex].Location = corp.ID;

                        this.GameData.Corporations[corp.CorpDetailsID].Status = 'Active';
                    }

                    var myModalEl = document.getElementById('startCorp');
                    var modal = bootstrap.Modal.getInstance(myModalEl)
                    modal.hide();

                    //var modalToggle = document.getElementById('startCorp');
                   // var myModal = new bootstrap.Modal(document.getElementById('startCorp'),{});
                    //myModal.hide();

                    this.TempCreateCorpArray = [];
                },

                customizeModal()
                {


                    var myModalEl = document.getElementById('bc');
                    var modal = bootstrap.Modal.getInstance(myModalEl)
                    modal.hide();
                }

            


            }
        })

    </script>
    <!-- <script src="" async defer></script>-->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

</body>

</html>